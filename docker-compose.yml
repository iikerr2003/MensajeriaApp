version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: mensajeria_postgres
    environment:
      POSTGRES_DB: mensajeria
      POSTGRES_USER: mensajeria_user
      POSTGRES_PASSWORD: mensajeria_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mensajeria_user -d mensajeria"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mensajeria_network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: mensajeria_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mensajeria_network

  # Adminer for database management (optional)
  adminer:
    image: adminer:latest
    container_name: mensajeria_adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - mensajeria_network

  # Server (to be implemented in Phase 2)
  # Uncomment after implementing server/main.py
  # server:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: mensajeria_server
  #   environment:
  #     DATABASE_URL: postgresql://mensajeria_user:mensajeria_password@postgres:5432/mensajeria
  #     REDIS_URL: redis://redis:6379
  #     JWT_SECRET_KEY: ${JWT_SECRET_KEY:-change-this-in-production}
  #     JWT_REFRESH_SECRET_KEY: ${JWT_REFRESH_SECRET_KEY:-change-this-too-in-production}
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - ./logs:/app/logs
  #   networks:
  #     - mensajeria_network
  #   command: uvicorn server.main:app --host 0.0.0.0 --port 8000 --reload

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  mensajeria_network:
    driver: bridge
